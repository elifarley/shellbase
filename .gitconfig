## In ~/.gitconfig:
# [include]
#   path = ~/IdeaProjects/shellbase/.gitconfig
#
# [user]
#   name = <name>
#   email = <email>

[alias]
  # ============================================================================
  # INTROSPECTION
  # ============================================================================

  # Show all aliases (optionally search with: git alias <pattern>)
  alias = !git config --list | grep ^alias\\. | cut -c 7- | grep -Ei --color \"$1\" "#"

  # ============================================================================
  # STATUS & LOGGING
  # ============================================================================

  # Enhanced status: shows latest commit hash + message, then status
  s = !echo "[$(git log -1 --format=%h)] $(git log -1 --pretty=%B)" && git status

  # Log one-line with graph and decorations
  l = log --oneline --graph --decorate

  # Compact history with date, message, and author
  h = log --pretty=format:\"%h %ad | %s%d [%an]\" --graph --date=short

  # Show last commit with list of changed files
  last = log -1 --stat HEAD

  # Show last commit details
  lasts = log -1 HEAD # Short. No files shown

  # Show last commit with full diff
  lastd = log -1 -p HEAD

  # List files changed in a commit (usage: git changed <commit-hash>)
  changed = diff-tree --no-commit-id --name-only -r

  # Outgoing changes: what will be pushed to upstream
  o = !git cherry -v @{upstream} && git status -sb && git diff --stat @{u}..HEAD

  # ============================================================================
  # FILE INSPECTION
  # ============================================================================

  # Complete file history with diffs (follows renames)
  fl = log --follow -p --

  # Compact file history (follows renames)
  fh = log --follow --oneline --

  # Who changed what line (usage: git blame <file>)
  fblame = blame -w -C -C -C # w: Ignore whitespace changes; CCC: Detect code moved/copied within/across files (3 levels deep)

  # Short blame with just author and line (usage: git bls <file>)
  fb = blame -w -C -C -C --line-porcelain

  # List all contributors to a file (usage: git contributors <file>)
  fcon = "!f() { git log --follow --pretty=format:'%an <%ae>' -- \"$1\" | sort -u; }; f"

  # File change statistics (usage: git file-stats <file>)
  fs = log --follow --stat --

  # Count commits per author for a file (usage: git file-authors <file>)
  fa = "!f() { git log --follow --format='%an' -- \"$1\" | sort | uniq -c | sort -rn; }; f"

  # Show when file was added (usage: git file-born <file>)
  fborn = log --follow --diff-filter=A --find-renames=40% --

  # ============================================================================
  # STAGING AREA (INDEX)
  # ============================================================================

  # Show diff of staged files
  id = diff --cached

  # Remove ALL files from staging area (reset index)
  irma = reset HEAD

  # Remove specific files from staging (new syntax)
  irm = restore --staged

  # Untrack files but keep them locally (usage: git iforget <file>)
  iforget = rm --cached

  # ============================================================================
  # COMMITS
  # ============================================================================

  # Undo commits safely: keeps changes staged (usage: git back [n])
  back = "!f() { git reset --soft HEAD~${1:-1}; }; f"

  # Undo commits completely: removes changes, protects local work (usage: git forget [n])
  forget = "!f() { git reset --keep HEAD~${1:-1}; }; f"

  # Add all and commit with message (usage: git ac "message")
  ac = !git add -A && git commit -m

  # Commit tracked files with message
  ci = commit -am

  # Commit staged files with message
  cis = commit -m

  # Amend last commit with all tracked changes
  ca = commit -a --amend

  # Amend last commit with staged changes only
  cas = commit --amend

  # ============================================================================
  # STASH
  # ============================================================================

  # Save with message and include untracked files (usage: git ssave "message")
  ssave = "!f() { git stash push -u -m \"${1:?Usage: ssave '<message>'}\"; }; f"

  # Quick stash: tracked files only, auto-generated message
  ss = stash push

  # Stash everything including ignored files
  ssa = stash push -a

  # List stashes with beautiful formatting
  sls = stash list --pretty=format:'%C(yellow)%gd%Creset %C(cyan)(%cr)%Creset %s'

  # Preview stash contents with full diff (usage: git speek [stash@{n}])
  speek = "!f() { git stash show -p ${1:-stash@{0}}; }; f"

  # Summary of stash changes (usage: git sshow [stash@{n}])
  sshow = "!f() { git stash show ${1:-stash@{0}}; }; f"

  # Apply stash and keep it in list (usage: git sapply [stash@{n}])
  sapply = "!f() { git stash apply ${1:-stash@{0}}; }; f"

  # Apply stash and remove from list (usage: git spop [stash@{n}])
  spopf = "!f() { git stash pop ${1:-stash@{0}}; }; f"

  # Interactive pop: preview before applying
  spop = "!bash -c 'git stash show -p && read -p \"Apply this stash? (y/n) \" -n 1 -r && echo && [[ $REPLY =~ ^[Yy]$ ]] && git stash pop'"

  # Drop specific stash (usage: git sdrop [stash@{n}])
  sdrop = "!f() { git stash drop ${1:-stash@{0}}; }; f"

  # Create branch from stash (usage: git sbranch <branch-name> [stash@{n}])
  sbranch = "!f() { git stash branch \"$1\" ${2:-stash@{0}}; }; f"

  # Clear all stashes (use with caution!)
  sclear = stash clear

  # WIP workflow: commit everything as work-in-progress
  wip = "!git add -A && git commit -m 'WIP'"

  # Undo WIP: reset soft to remove WIP commit
  unwip = "!git log -1 --format='%s' | grep -q '^WIP$' && git reset --soft HEAD~1 || echo 'No WIP commit found'"

  # ============================================================================
  # BRANCHING
  # ============================================================================

  # List local branches
  b = branch

  # List all branches (local + remote)
  bls = branch -a

  # Create and switch to new branch
  bc = switch -c

  # Delete local branch (safe: only if merged)
  brm = branch -d

  # Rename current branch
  bmv = branch -m

  # Create a new branch from a specific existing branch:
  #! br <new> <existing>
  #! switch <new>

  # Push new branch to origin and set upstream tracking
  # Usage: git pn <branch-name>
  pn = "!git push -u origin ${1:?Missing new branch name to push}"

  # ============================================================================
  # UTILITIES
  # ============================================================================

  # Show object type (usage: git type <object>)
  type = cat-file -t

  # Show object contents (usage: git dump <object>)
  dump = cat-file -p

[pull]
	rebase = true
