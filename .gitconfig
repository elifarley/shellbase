## In ~/.gitconfig:
# [include]
#   path = ~/IdeaProjects/shellbase/.gitconfig
#
# [user]
#   name = <name>
#   email = <email>

[include]
    path = ~/IdeaProjects/shellbase/.delta.gitconfig

[commit]
    verbose = true

[pretty]
    log1        = %C(yellow)%h%C(reset) %C(blue)%ad%C(reset) %C(magenta)[%an]%C(reset)%C(auto)%d%C(reset) %s
    log1reldate = %C(yellow)%h%C(reset) %C(blue)%ad (%cr)%C(reset) %C(magenta)[%an]%C(reset)%C(auto)%d%C(reset) %s
    logbody       = %C(yellow)%h%C(reset) %C(blue)%ad (%cr)%C(reset) %C(magenta)[%an]%C(reset)%C(auto)%d%C(reset)%n%s%C(reset)%n%b
    stash  = %C(yellow)%gd%Creset %C(cyan)(%cr)%Creset %s

[alias]
  # ============================================================================
  # INTROSPECTION
  # ============================================================================

  # Show all aliases (optionally search with: git alias <pattern>)
  alias = !git config --list | grep ^alias\\. | cut -c 7- | grep -Ei --color \"$1\" "#"

  # ============================================================================
  # LOGGING
  # ============================================================================

  # Log one-line with graph and decorations
  l = log --oneline --graph --decorate --color

  # Log one-line with date, author and message
  ll = log --graph --pretty=log1 --date=short

  # All branches
  la = "!f() { git ll --all \"$@\"; }; f"

  # Log commits to a file
  llf = "!f() { \
    test $# -eq 0 -o \"$1\" = '-h' && { \
      printf 'llf: Log commits to a file.\n-p: show patches.\nUsage: git llf <file> [-p]' >&2; return 1; }; \
    t=\"$1\"; shift; \
    git ll \"$@\" --follow -- \"$GIT_PREFIX$t\"; \
  }; f"

  # Search commits by message
  lf = "!f() { \
    test $# -eq 0 -o \"$1\" = '-h' && { \
      printf '\nlf: Search commits by MESSAGE.\n-i: Ignore case.\n-p: Show patches.\n--all: Consider ALL branches.\nUsage: git lf <search-term> [-ip] [--all]' >&2; return 1; }; \
    t=\"$1\"; shift; \
    git ll --grep=\"$t\" \"$@\"; \
  }; f"

  # Ex: Search in specific file
  # git lc "getUserById" -- src/users.js
  lc = "!f() { \
    test $# -eq 0 -o \"$1\" = '-h' && { \
      printf '\nlc: Search commits by CODE CHANGES in diff.\n-i: Ignore case.\n-p: Show patches.\n--all: Consider ALL branches.\n-- file: Restrict to a file.\nUsage: git lc <search-term> [-ip] [--all] [-- file]' >&2; return 1; }; \
    t=\"$1\"; shift; \
    git ll -S \"$t\" \"$@\"; \
  }; f"

  # Search commits by RegEx changes
  lcr = "!f() { \
    test $# -eq 0 -o \"$1\" = '-h' && { \
      printf '\nlcr: Search commits by RegEx CODE CHANGES in diff.\n-i: Ignore case.\n-p: Show patches.\n--all: Consider ALL branches.\n-- file: Restrict to a file.\nUsage: git lcr <RegEx> [-ip] [--all] [-- file]' >&2; return 1; }; \
    t=\"$1\"; shift; \
    git ll -G \"$t\" \"$@\"; \
  }; f"

  # Commits by specific author
  lau = "!f() { t=\"${1:?(Search commits by AUTHOR) Missing search term}\"; shift; git ll --author=\"$t\" \"$@\"; }; f"

  # Commits in date range
  ld = "!f() { git ll --since=\"$1\" --until=\"${2:-now}\"; }; f"

  # File history with patches (-p)
  lp = "!f() { git ll -p \"$@\"; }; f"

  # ============================================================================
  # FILE INSPECTION
  # ============================================================================

  # Complete file history with diffs (follows renames)
  fl = log --follow -p --

  # Compact file history (follows renames)
  fh = log --follow --oneline --

  # Who changed what line (usage: git blame <file>)
  fblame = blame -w -C -C -C # w: Ignore whitespace changes; CCC: Detect code moved/copied within/across files (3 levels deep)

  # Short blame with just author and line (usage: git bls <file>)
  fb = blame -w -C -C -C --line-porcelain

  # List all contributors to a file (usage: git contributors <file>)
  fcon = "!f() { git log --follow --pretty=format:'%an <%ae>' -- \"$1\" | sort -u; }; f"

  # File change statistics (usage: git file-stats <file>)
  fs = log --follow --stat --

  # Count commits per author for a file (usage: git file-authors <file>)
  fa = "!f() { git log --follow --format='%an' -- \"$1\" | sort | uniq -c | sort -rn; }; f"

  # Show when file was added (usage: git file-born <file>)
  fborn = log --follow --diff-filter=A --find-renames=40% --

  # ═══════════════════════════════════════════════════════════════════
  #  UNSTAGING / Undo Staging (us*)
  # ═══════════════════════════════════════════════════════════════════

  # Unstage specific files (most common - shortest alias)
  # Usage: git us <file> [<file2> ...]
  us = restore --staged

  # Unstage all files (nuclear option)
  # Usage: git usa
  usa = reset HEAD

  # Stop tracking files but keep them locally
  # Usage: git untrack <file> [<file2> ...]
  # Common use: git untrack .env (after accidentally committing secrets)
  untrack = "!f() { \
    test $# -eq 0 -o \"$1\" = '-h' -o \"$1\" = '--help' && { \
      printf 'untrack: Stop tracking files but keep them locally\\n' >&2; \
      printf 'Usage: git untrack <file> [<file2> ...]\\n' >&2; \
      printf 'Example: git untrack .env config.local.json\\n' >&2; \
      return 1; \
    }; \
    git rm --cached \"$@\"; \
  }; f"

  # ═══════════════════════════════════════════════════════════════════
  #  UNDO COMMITS (non-destructive: keeps your work)
  # ═══════════════════════════════════════════════════════════════════

  # Undo commits safely: keeps changes staged
  # Usage: git back [N|COMMIT]
  #   git back        → undo last commit, keep changes staged
  #   git back 3      → undo last 3 commits, keep changes staged
  #   git back a1b2c3 → reset to specific commit, keep changes staged
  back = "!f() { \
    case \"${1:-}\" in \
      '-h'|'--help') \
        printf 'back: Undo commits, keep changes staged (non-destructive)\\n' >&2; \
        printf 'Usage: git back [N|COMMIT]\\n' >&2; \
        printf '  git back        → undo last commit\\n' >&2; \
        printf '  git back 3      → undo last 3 commits\\n' >&2; \
        printf '  git back a1b2c3 → reset to specific commit\\n' >&2; \
        return 1;; \
      '') target='HEAD~1' ;; \
      [1-9]|[1-9][0-9]|[1-9][0-9][0-9]) target=\"HEAD~$1\" ;; \
      *) target=\"$1\" ;; \
    esac; \
    git reset --soft \"$target\"; \
  }; f"

  # Undo commits and unstage changes (but keep in working tree)
  # Usage: git undo [N|COMMIT]
  #   git undo        → undo last commit, unstage changes
  #   git undo 3      → undo last 3 commits, unstage changes
  #   git undo a1b2c3 → reset to specific commit, unstage changes
  undo = "!f() { \
    case \"${1:-}\" in \
      '-h'|'--help') \
        printf 'undo: Undo commits, unstage changes (non-destructive)\\n' >&2; \
        printf 'Usage: git undo [N|COMMIT]\\n' >&2; \
        printf '  git undo        → undo last commit, unstage\\n' >&2; \
        printf '  git undo 3      → undo last 3 commits, unstage\\n' >&2; \
        printf '  git undo a1b2c3 → reset to specific commit, unstage\\n' >&2; \
        return 1;; \
      '') target='HEAD~1' ;; \
      [1-9]|[1-9][0-9]|[1-9][0-9][0-9]) target=\"HEAD~$1\" ;; \
      *) target=\"$1\" ;; \
    esac; \
    git reset --mixed \"$target\"; \
  }; f"

  # Forget commits and their changes (local changes preserved)
  # Usage: git forget [N|COMMIT]
  #   git forget        → forget last commit and its changes
  #   git forget 3      → forget last 3 commits and their changes
  #   git forget a1b2c3 → forget commits back to specific commit
  # Note: Aborts if local changes would be lost
  forget = "!f() { \
    case \"${1:-}\" in \
      '-h'|'--help') \
        printf 'forget: Discard commits and their changes (local work protected)\\n' >&2; \
        printf 'Usage: git forget [N|COMMIT]\\n' >&2; \
        printf '  git forget        → forget last commit\\n' >&2; \
        printf '  git forget 3      → forget last 3 commits\\n' >&2; \
        printf '  git forget a1b2c3 → forget back to specific commit\\n' >&2; \
        printf 'Note: Aborts if local changes would be overwritten\\n' >&2; \
        return 1;; \
      '') target='HEAD~1' ;; \
      [1-9]|[1-9][0-9]|[1-9][0-9][0-9]) target=\"HEAD~$1\" ;; \
      *) target=\"$1\" ;; \
    esac; \
    git reset --keep \"$target\"; \
  }; f"

  # ═══════════════════════════════════════════════════════════════════
  #  DISCARD CHANGES (destructive: requires explicit arguments)
  # ═══════════════════════════════════════════════════════════════════

  # Discard changes to specific files (DESTRUCTIVE: loses uncommitted work)
  # Usage: git discard <file> [<file2> ...]
  #   git discard server.js
  #   git discard src/*.js
  discard = "!f() { \
    test $# -eq 0 -o \"$1\" = '-h' -o \"$1\" = '--help' && { \
      printf 'discard: Discard uncommitted changes to files (DESTRUCTIVE)\\n' >&2; \
      printf 'Usage: git discard <file> [<file2> ...]\\n' >&2; \
      printf '  git discard server.js\\n' >&2; \
      printf '  git discard src/*.js\\n' >&2; \
      printf 'Warning: Changes are permanently lost!\\n' >&2; \
      return 1; \
    }; \
    git restore \"$@\"; \
  }; f"

  # Discard ALL uncommitted changes (DESTRUCTIVE: nuclear option)
  # Usage: git discard-all
  discard-all = "!f() { \
    test \"$1\" = '-h' -o \"$1\" = '--help' && { \
      printf 'discard-all: Discard ALL uncommitted changes (DESTRUCTIVE)\\n' >&2; \
      printf 'Usage: git discard-all\\n' >&2; \
      printf 'Warning: All changes in working tree and staging area are lost!\\n' >&2; \
      return 1; \
    }; \
    printf 'Discarding ALL uncommitted changes...\\n' >&2; \
    git reset --hard; \
  }; f"

  # Rewind to a specific commit (DESTRUCTIVE: discards history + changes)
  # Usage: git rewind <commit>
  #   git rewind HEAD~5  → go back 5 commits
  #   git rewind a1b2c3  → rewind to specific commit
  rewind = "!f() { \
    test $# -eq 0 -o \"$1\" = '-h' -o \"$1\" = '--help' && { \
      printf 'rewind: Rewind to a commit, discarding everything after (DESTRUCTIVE)\\n' >&2; \
      printf 'Usage: git rewind <commit>\\n' >&2; \
      printf '  git rewind HEAD~5  → go back 5 commits\\n' >&2; \
      printf '  git rewind a1b2c3  → rewind to specific commit\\n' >&2; \
      printf 'Warning: Discards commits and all uncommitted changes!\\n' >&2; \
      return 1; \
    }; \
    target=\"$1\"; \
    printf 'Rewinding to %s...\\n' \"$target\" >&2; \
    git reset --hard \"$target\"; \
  }; f"

  # ============================================================================
  #  STATUS & COMMITS
  # ============================================================================

  # Enhanced status: shows latest commit hash + message, then status
  statusbase = "!f() { \
    git rev-parse --git-dir > /dev/null 2>&1 || { echo 'Not a git repository' >&2; return 1; }; \
    git status -sb \"$@\"; \
  }; f"

  # No untracked files shown
  s = !git statusbase -uno \"$@\"
  # Untracked files are also shown
  sa = !git statusbase --long \"$@\"

  # Show status with patch of staged changes
  ss = "!f() { \
    test \"$1\" = '-h' && { \
      printf '\nss: Show status with patch of staged changes.\nUsage: git ss [file]' >&2; return 1; }; \
    if test $# -eq 0; then \
      printf '─────────────────── Staged changes:\n'; \
      git diff --cached; \
      git diff --cached --stat; \
    else \
      t=\"$1\"; shift; \
      printf '─────────────────── Staged changes for FILE:\n'; \
      git diff --cached \"$@\" -- \"${GIT_PREFIX}$t\"; \
      git diff --cached --stat \"$@\" -- \"${GIT_PREFIX}$t\"; \
    fi; \
    git s; \
  }; f"

  # Show status with patch of working tree changes
  sw = "!f() { \
    test \"$1\" = '-h' && { \
      printf '\nsw: Show status with patch of working tree changes.\nUsage: git sw [file]' >&2; return 1; }; \
    if test $# -eq 0; then \
      printf '─────────────────── Working tree changes:\n'; \
      git diff; \
      git diff --stat; \
    else \
      t=\"$1\"; shift; \
      printf '─────────────────── Working tree changes for FILE:\n'; \
      git diff \"$@\" -- \"${GIT_PREFIX}$t\"; \
      git diff --stat \"$@\" -- \"${GIT_PREFIX}$t\"; \
    fi; \
    git s; \
  }; f"

  # Show specific commit (defaults to last) with list of changed files
  sh = log -1 --stat --pretty=logbody --date=human-local
  # Show specific commit (defaults to last) with patch
  shp = show --pretty=logbody --date=human-local
  # Show files changed in a commit (usage: git shc <commit-hash>)
  shc  = diff-tree --no-commit-id --name-only -r
  # Show file diff in a commit
  shf = "!f() { \
    test $# -eq 0 -o \"$1\" = '-h' && { \
      printf '\nshf: Show file at a commit (with patch).\nUsage: git shf <file>' >&2; return 1; }; \
    t=\"$1\"; shift; \
    git shp \"$@\" -- \"$GIT_PREFIX$t\"; \
  }; f"

  # Add all and commit with message (usage: git ac "message")
  ac = !git add -A && git commit -m

  # Commit tracked files
  ci = commit -a

  # Commit staged files
  cis = commit

  # Amend last commit with all tracked changes
  ca = commit -a --amend

  # Amend last commit with staged changes only
  cas = commit --amend

  # ──────────────────────────────────────────────────────────────────
  #  INTERACTIVE COMMITS
  # ──────────────────────────────────────────────────────────────────

  # Add patches interactively (no commit)
  cap = add --patch

  # Commit patches interactively (most common workflow)
  # Stages hunks interactively, then commits
  cii = "!f() { \
    git add --patch && \
    git status -sb && \
    printf '\\n' && \
    git diff --cached --stat && \
    printf '\\nCommit message: ' && \
    read -r msg && \
    test -n \"$msg\" && git commit -m \"$msg\" || { \
      printf 'Aborted (empty message)\\n' >&2; return 1; \
    }; \
  }; f"

  # Full interactive staging menu (git add -i wrapper)
  cim = "!git add --interactive && git status -sb && git commit"

  # Outgoing changes: what will be pushed to upstream
  o = !git cherry -v @{upstream} && git status -sb && git diff --stat @{u}..HEAD

  # ============================================================================
  # STASH
  # ============================================================================

  # Quick stash: tracked files only, auto-generated message
  ssave = stash push

  # Save with message and include untracked files (usage: git ssave "message")
  ssavea = "!f() { git stash push -u -m \"${1:?Usage: ssavea '<message>'}\"; }; f"

  # Stash everything including ignored files
  ssavefull = stash push -a

  # List stashes with beautiful formatting
  sls = stash list --pretty=stash

  # Preview stash contents with full diff (usage: git speek [stash@{n}])
  speek = "!f() { git stash show -p ${1:-stash@{0}}; }; f"

  # Summary of stash changes (usage: git sshow [stash@{n}])
  sshow = "!f() { git stash show ${1:-stash@{0}}; }; f"

  # Apply stash and keep it in list (usage: git sapply [stash@{n}])
  sapply = "!f() { git stash apply ${1:-stash@{0}}; }; f"

  # Apply stash and remove from list (usage: git spop [stash@{n}])
  spopf = "!f() { git stash pop ${1:-stash@{0}}; }; f"

  # Interactive pop: preview before applying
  spop = "!bash -c 'git stash show -p && read -p \"Apply this stash? (y/n) \" -n 1 -r && echo && [[ $REPLY =~ ^[Yy]$ ]] && git stash pop'"

  # Drop specific stash (usage: git sdrop [stash@{n}])
  sdrop = "!f() { git stash drop ${1:-stash@{0}}; }; f"

  # Create branch from stash (usage: git sbranch <branch-name> [stash@{n}])
  sbranch = "!f() { git stash branch \"$1\" ${2:-stash@{0}}; }; f"

  # Clear all stashes (use with caution!)
  sclear = stash clear

  # WIP workflow: commit everything as work-in-progress
  wip = "!git add -A && git commit -m 'WIP'"

  # Undo WIP: reset soft to remove WIP commit
  unwip = "!git log -1 --format='%s' | grep -q '^WIP$' && git reset --soft HEAD~1 || echo 'No WIP commit found'"

  # ═══════════════════════════════════════════════════════════════════
  #  TAG MANAGEMENT (t*)
  # ═══════════════════════════════════════════════════════════════════

  # List tags matching pattern (usage: git t "v1.*")
  t = "!f() { git tag -l \"${1:-*}\"; }; f"

  # Create lightweight tag (default)
  # Usage: git tc v1.0 [<commit>]
  tc = "!f() { \
    test $# -eq 0 && { printf 'Usage: git tc <tag> [<commit>]\\n' >&2; return 1; }; \
    git tag \"$@\"; \
  }; f"

  # Create annotated tag
  # Usage: git ta v1.0 "Release version 1.0"
  ta = "!f() { \
    test $# -eq 0 && { printf 'Usage: git ta <tag> [<message>]\\n' >&2; return 1; }; \
    tag=\"$1\"; shift; \
    msg=\"${*:-Annotated tag $tag}\"; \
    git tag -a \"$tag\" -m \"$msg\"; \
  }; f"

  # Show tag details (usage: git ts v1.0)
  ts = "!f() { \
    test $# -eq 0 && { printf 'Usage: git ts <tag>\\n' >&2; return 1; }; \
    git show \"$1\"; \
  }; f"

  # Rename tag (changes name, keeps same commit)
  # Usage: git tr v1.0 v1.0.1
  tr = "!f() { \
    test $# -lt 2 && { printf 'Usage: git tr <old-tag> <new-tag>\\n' >&2; return 1; }; \
    old=\"$1\"; new=\"$2\"; \
    git rev-parse \"$old\" >/dev/null 2>&1 || { \
      printf 'Error: tag \"%s\" does not exist\\n' \"$old\" >&2; return 1; \
    }; \
    commit=\"$(git rev-list -n 1 \"$old\")\"; \
    git tag \"$new\" \"$commit\" && git tag -d \"$old\" && \
    printf 'Tag \"%s\" renamed to \"%s\"\\n' \"$old\" \"$new\"; \
  }; f"

  # Move tag (changes target commit, keeps same name)
  # Usage: git tm v1.0 [<new-commit>]
  #   git tm v1.0           → move to HEAD
  #   git tm v1.0 a1b2c3d   → move to specific commit
  tm = "!f() { \
    test $# -eq 0 && { printf 'Usage: git tm <tag> [<new-commit>]\\n' >&2; return 1; }; \
    tag=\"$1\"; \
    new_commit=\"${2:-HEAD}\"; \
    git rev-parse \"$tag\" >/dev/null 2>&1 || { \
      printf 'Error: tag \"%s\" does not exist\\n' \"$tag\" >&2; return 1; \
    }; \
    old_commit=\"$(git rev-list -n 1 \"$tag\")\"; \
    git tag -f \"$tag\" \"$new_commit\" && \
    printf 'Tag \"%s\" moved:\\n  %s → %s\\n' \"$tag\" \"${old_commit:0:7}\" \"$(git rev-parse --short \"$new_commit\")\"; \
  }; f"

  # Move and re-annotate
  # Usage: git tma v1.0 "New message" [<new-commit>]
  tma = "!f() { \
    test $# -lt 2 && { printf 'Usage: git tma <tag> <message> [<new-commit>]\\n' >&2; return 1; }; \
    tag=\"$1\"; msg=\"$2\"; new_commit=\"${3:-HEAD}\"; \
    git rev-parse \"$tag\" >/dev/null 2>&1 || { \
      printf 'Error: tag \"%s\" does not exist\\n' \"$tag\" >&2; return 1; \
    }; \
    old_commit=\"$(git rev-list -n 1 \"$tag\")\"; \
    git tag -f -a \"$tag\" -m \"$msg\" \"$new_commit\" && \
    printf 'Tag \"%s\" moved and re-annotated:\\n  %s → %s\\n' \"$tag\" \"${old_commit:0:7}\" \"$(git rev-parse --short \"$new_commit\")\"; \
  }; f"

  # Push tags to remote
  tp = "!f() { \
    if [ $# -eq 0 ]; then \
      git push --tags; \
    else \
      git push origin \"$@\"; \
    fi; \
  }; f"

  # Delete local tag
  td = "!f() { \
    test $# -eq 0 && { printf 'Usage: git td <tag>\\n' >&2; return 1; }; \
    git tag -d \"$1\"; \
  }; f"

  # Delete remote tag
  tdr = "!f() { \
    test $# -eq 0 && { printf 'Usage: git tdr <tag>\\n' >&2; return 1; }; \
    git push origin --delete \"$1\"; \
  }; f"

  # Checkout tag
  tco = "!f() { \
    test $# -eq 0 && { printf 'Usage: git tco <tag>\\n' >&2; return 1; }; \
    git checkout \"$1\"; \
  }; f"

  # ═══════════════════════════════════════════════════════════════════
  #  TAG QUERIES (tw*)
  # ═══════════════════════════════════════════════════════════════════

  # Show 'Tags Which Contain' a commit (commit is in tag's history)
  # Usage: git twc [<commit>]  (defaults to HEAD)
  twc = "!f() { \
    commit=\"${1:-HEAD}\"; \
    git tag --contains \"$commit\"; \
  }; f"

  # Show 'Tags Which Point' directly at an object (exact match)
  # Usage: git twp [<object>]  (defaults to HEAD)
  twp = "!f() { \
    object=\"${1:-HEAD}\"; \
    git tag --points-at \"$object\"; \
  }; f"

  # ============================================================================
  # BRANCHING
  # ============================================================================

  # List local branches
  b = branch

  # List all branches (local + remote)
  bls = branch -a

  # Create and switch to new branch
  bc = switch -c

  # Delete local branch (safe: only if merged)
  brm = branch -d

  # Rename current branch
  bmv = branch -m

  # Create a new branch from a specific existing branch:
  #! br <new> <existing>
  #! switch <new>

  # ═══════════════════════════════════════════════════════════════════
  #  BRANCH QUERIES (bw*)
  # ═══════════════════════════════════════════════════════════════════

  # Show 'Branches Which Contain' a commit (commit is in branch's history)
  # Usage: git bwc [<commit>]  (defaults to HEAD)
  bwc = "!f() { \
    commit=\"${1:-HEAD}\"; \
    git branch --contains \"$commit\"; \
  }; f"

  # Show 'Branches Which Point' directly at an object (exact match)
  # Usage: git bwp [<object>]  (defaults to HEAD)
  bwp = "!f() { \
    object=\"${1:-HEAD}\"; \
    git branch --points-at \"$object\"; \
  }; f"

  # Which branches DON'T contain this commit?
  # Usage: git bwnc [<commit>]  (defaults to HEAD)
  bwnc = "!f() { \
    commit=\"${1:-HEAD}\"; \
    git branch --no-contains \"$commit\"; \
  }; f"

  # Which branches are merged into HEAD?
  bwm = "!f() { \
    commit=\"${1:-HEAD}\"; \
    git branch --merged \"$commit\"; \
  }; f"

  # Which branches are NOT merged into HEAD?
  bwnm = "!f() { \
    commit=\"${1:-HEAD}\"; \
    git branch --no-merged \"$commit\"; \
  }; f"

  # Push new branch to origin and set upstream tracking
  # Usage: git pn <branch-name>
  pn = "!git push -u origin ${1:?Missing new branch name to push}"

  # ============================================================================
  # UTILITIES
  # ============================================================================

  # Show object type (usage: git type <object>)
  type = cat-file -t

  # Show object contents (usage: git dump <object>)
  dump = cat-file -p

[pull]
	rebase = true
