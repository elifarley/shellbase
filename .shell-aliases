alias pss='ps -o uname,pid,ppid,c,%cpu,cputime=CPU-time,%mem,rss,start,wchan,args --cols 2000 -C'
alias p='ps -fe |grep -i'
alias hs='history|grep -i'
alias f="find . -type d \(-name '.git' -o -name '.hg' \) -prune -o -print |grep -i"
alias sc='screen -DR'
alias j='\jobs -l'
alias fgg='\fg %'
alias bgg='\bg %'

# Puts the newest file at the bottom, right above the prompt
# l=long : h=human readable sizes : a=all : r=reverse sort : t=time sort : F=append indicator (one of */=>@|)
alias lt='\ls --color=auto -lhFArt'
alias ll='\ls --color=auto -lhFa'
alias ls='\ls --color=auto -lhFAG'
alias  l='\ls --color=auto -F --group-directories-first'
alias dir='\dir --color=auto'
alias vdir='\vdir --color=auto'

# Prepend dir to PATH if it exists and isn't already there
prepend_to_path() {
  local dir="$1"
  if [ -d "$dir" ] && [[ ":$PATH:" != *":$dir:"* ]]; then
    export PATH="$dir:$PATH"
  fi
}

# Example: export lsofwrite; watch 'lsofwrite -c chromium -r5'
lsofwrite()  {
  lsof "$@" | grep -E 'REG|DIR' | grep -Pv 'mem |^[^\s]+\s+\d+\s+[^\s]+\s+\d+r'
}

memstat() {
  vmstat -SM -s | grep -E -iv 'cpu|fork|boot|interrupts'
  vmstat -SM --wide
  echo '-------------------------------------------------------------------------------------------------------------'
  free -m
  echo '-------------------------------------------------------------------------------------------------------------'
  swapon --show=NAME,TYPE,LABEL,PRIO,SIZE,USED
  zramctl 2>/dev/null
  echo '-------------------------------------------------------------------------------------------------------------'

  ( cd /sys/kernel/debug/zswap 2>/dev/null || { echo "Root access needed to show ZSWAP info"; return 1 ;}
  test "$(cat pool_total_size)" -a "$(cat pool_total_size)" != '0' && {
    echo "ZSWAP written_back_pages $(cat written_back_pages)"
    echo "ZSWAP Used \
$(expr $(cat pool_total_size) / 1048576) MB \
($(expr $(cat stored_pages) \* 4096 / 1048576) MB uncompressed) \
= $(awk "BEGIN {print $(cat stored_pages) * 4096 / $(cat pool_total_size)}") x"
  })
  ( cd /sys/module/zswap/parameters && grep -R . )
}

s() { # do sudo, or sudo the last command if no argument given
  if [[ $# == 0 ]]; then
    sudo $(history -p '!!')
  else
    sudo "$@"
  fi
}

mvln() {
  test $# -ne 2 && echo "\
$(basename "$0") - Moves a file or dir to <TARGET> and creates a relative symlink in its original place
Usage: $0 <SRC> <TARGET>\
" && return 1
  local src="$1"; shift
  local target="$1"; shift
  local custom_target_name=1; test -e "$target" && custom_target_name=''
  mv -iv "$src" "$target"
  local basesrc="$(basename "$src")" dirsrc="$(dirname "$src")"
  local basetarget="$basesrc"
  test "$custom_target_name" &&  basetarget="$(basename "$target")" && target="$(dirname "$target")"
  local relpath="$(realpath --relative-to "$dirsrc" "$target")"
  ln -sv "$relpath/$basetarget" "$src"
}

# SmartCTL
alias smartctl='smartctl -s on -i -A -f brief -f hex,id -l devstat'

# Maven

# Shows 'null object or invalid expression' for some cases
mvnprop() {
  local prop="$1"; shift
  mvn 2>/dev/null help:evaluate -q -DforceStdout -Dexpression="$prop" "$@" \
  && echo
}
# Shows empty line
mvnprop() {
  local prop="$1"; shift
  MAVEN_OPTS="$MAVEN_OPTS -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn" \
    mvn 2>/dev/null -B com.github.ekryd.echo-maven-plugin:echo-maven-plugin:echo -Decho.message='${'"$prop"'}' "$@" \
      | grep -A1 echo-maven-plugin | grep -v -- '--' | grep -v echo-maven-plugin | cut -d' ' -f2-
}
mvndep() {
  local dep="$1"; shift
  MAVEN_OPTS="$MAVEN_OPTS -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn" \
    mvn 2>&1 -B dependency:tree ${dep:+-Dincludes="$dep"} "$@" \
    | sed -rn '/\[INFO\] --- /,/Reactor Summary for / s/\[INFO\] //p' | head -n-1
}

gradle.dep() (
  local dep="${1:?Please specify dependency to be checked}"; shift
  set -x
  ./gradlew 2>&1 :dependencyInsight --configuration compileClasspath \
    ${dep:+--dependency="$dep"} "$@"
)

# git
alias g=git
hug() {
  test "$1" = help && { shift; git hughelp "$@"; return; }
  git "$@"
}; export -f hug
h() { hug "$@"; }
# See convo about the Hug tool at https://poe.com/chat/vwu52ea0bup1zllwyg
alias git.verbose='GIT_TRACE=1 GIT_SSH_COMMAND="ssh -v" git'
# ssh-add -l
# GIT_SSH_COMMAND="ssh -i ~/.ssh/your_private_key -o IdentitiesOnly=yes" git push
# git branch -a --contains 8beeff00d
# git show 8beeff00d

git.squash() (
  test $# -eq 0 && cat <<EOF && return 1
  USAGE:
  git.squash <N>
  (The last N commits will be squashed)
  After squashing, you need to (possibly force-) push.
EOF
  
  git reset --soft HEAD~$1 && git commit
  # git commit --edit -m"$(git log --format=%B --reverse HEAD..HEAD@{1})"
)

git.rename() (
  currentBranch="$(git rev-parse --abbrev-ref HEAD)"
  test $# != 1 && cat <<EOF && return 1
  Renames the current branch ($currentBranch) both locally and remotely.
  USAGE:
  git rename <new branch name>
EOF
  
  newBranch="$1"; shift
  git branch -m "$newBranch" && \
  git push origin :"$currentBranch" "$newBranch"
)

git.remote2ssh() {
    local remote=${1:-origin}
    local url=$(git remote get-url "$remote")
    if [[ "$url" =~ ^https://github\.com/ ]]; then
        local ssh_url="git@github.com:${url#https://github.com/}"
        git remote set-url "$remote" "$ssh_url"
        echo "Updated $remote remote to use SSH:"
        git remote -v
    else
        echo "Remote $remote is not using HTTPS GitHub URL"
    fi
}

git.grep() {
  local search_string="$1"; shift
  local file_path="$1"
  local files=()

  test "$file_path" &&
    files+=("--" "$file_path")

  #git grep -B 1 "$search_string" $(git branch -l | grep -v '^\*' | awk '{print $1}') "${files[@]}"
  git log --all --oneline  --graph -G"$search_string" "${files[@]}"
  echo ' Then...
# git branch -a --contains <commit hash>
# git show <commit hash>
'
}

git.hlog() (
  # Order-Preserving Base58 (OPB58)
  # Omit IOlo
  BASE58=$(echo {0..9} {A..H} {J..N} {P..Z} {a..k} {m..n} {p..z} | tr -d ' ')
  int2b58() {
    local i n="$1" sign
    ((n < 0 )) && printf -- '-' && n=$((-n))
    for i in $(echo "obase=58; $n" | bc); do
      printf ${BASE58:$(( 10#$i )):1}
    done; echo
  }
  
  hex2decimal() { printf '%u' "0x$1"; echo ;}
  
  hfrev() {
    # $(date -d 2023-01-01 +%s) = 1672527600
    # 1672527600/60 = 27875460
    local ts="$1" author="$2" pr="$3" \
    hfrevTS=$(( ts / 60 - 27875460 ))
    # echo "$ts $author [$pr] $msg"
    # 58 ** 2 = 3364
    authorHash=$((
      $(hex2decimal $(echo "$author" | md5sum | head -c3))
      % 3364
    ))
    printf '%4s.%2s.%04d\n' \
      "$(int2b58 $hfrevTS)" \
      "$(int2b58 $authorHash )" \
      "$pr" \
      | tr ' ' '0'
  }
  
  while read rev ts author msg; do
    pr="$(echo "$msg" | sed -En 's/.*\(#([0-9]+)\)$/\1/p')"
    git log -1 --format="$(hfrev "$ts" "$author" "$pr") %an %s" \
      "$rev"
  done < <(git log --format='%H %at %an:%ae %s' "$@")
)

# jq

jqlog() {
  grep --line-buffered -E '^{' | while read -r LINE; do echo -E "$LINE" \
    | jq -r '.level + " " + .loggerName + "\t" + .message'; done
}

alias kopia='kopia --config-file=/home/ecc/.var/app/io.kopia.KopiaUI/config/kopia/repository.config'

