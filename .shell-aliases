alias pss='ps -o uname,pid,ppid,c,%cpu,cputime=CPU-time,%mem,rss,start,wchan,args --cols 2000 -C'
alias p='ps -fe |grep -i'
alias h='history|grep -i'
alias f="find . -type d \(-name '.git' -o -name '.hg' \) -prune -o -print |grep -i"
alias sc='screen -DR'
alias j='\jobs -l'
alias fgg='\fg %'
alias bgg='\bg %'

# Puts the newest file at the bottom, right above the prompt
# l=long : h=human readable sizes : a=all : r=reverse sort : t=time sort : F=append indicator (one of */=>@|)
alias lt='\ls --color=auto -lhFart'
alias ll='\ls --color=auto -lhFa'
alias ls='\ls --color=auto -ghFA'
alias  l='\ls --color=auto -F'
alias dir='\dir --color=auto'
alias vdir='\vdir --color=auto'

# Example: export lsofwrite; watch 'lsofwrite -c chromium -r5'
lsofwrite()  {
  lsof "$@" | grep -E 'REG|DIR' | grep -Pv 'mem |^[^\s]+\s+\d+\s+[^\s]+\s+\d+r'
}

memstat() {
  vmstat -SM -s | grep -E -iv 'cpu|fork|boot|interrupts'
  vmstat -SM --wide
  echo '-------------------------------------------------------------------------------------------------------------'
  free -m
  echo '-------------------------------------------------------------------------------------------------------------'
  swapon --show=TYPE,LABEL,PRIO,SIZE,USED
  zramctl 2>/dev/null
  echo '-------------------------------------------------------------------------------------------------------------'

  ( cd /sys/kernel/debug/zswap 2>/dev/null || { echo "Root access needed to show ZSWAP info"; return 1 ;}
  test "$(cat pool_total_size)" -a "$(cat pool_total_size)" != '0' && {
    echo "ZSWAP written_back_pages $(cat written_back_pages)"
    echo "ZSWAP Used \
$(expr $(cat pool_total_size) / 1048576) MB \
($(expr $(cat stored_pages) \* 4096 / 1048576) MB uncompressed) \
= $(awk "BEGIN {print $(cat stored_pages) * 4096 / $(cat pool_total_size)}") x"
  })
  ( cd /sys/module/zswap/parameters && grep -R . )
}

s() { # do sudo, or sudo the last command if no argument given
  if [[ $# == 0 ]]; then
    sudo $(history -p '!!')
  else
    sudo "$@"
  fi
}

mvln() {
  test $# -ne 2 && echo "\
$(basename "$0") - Moves a file or dir to <TARGET> and creates a relative symlink in its original place
Usage: $0 <SRC> <TARGET>\
" && return 1
  local src="$1"; shift
  local target="$1"; shift
  local custom_target_name=1; test -e "$target" && custom_target_name=''
  mv -iv "$src" "$target"
  local basesrc="$(basename "$src")" dirsrc="$(dirname "$src")"
  local basetarget="$basesrc"
  test "$custom_target_name" &&  basetarget="$(basename "$target")" && target="$(dirname "$target")"
  local relpath="$(realpath --relative-to "$dirsrc" "$target")"
  ln -sv "$relpath/$basetarget" "$src"
}

# SmartCTL
alias smartctl='smartctl -s on -i -A -f brief -f hex,id -l devstat'

# Maven

# Shows 'null object or invalid expression' for some cases
mvnprop() {
  local prop="$1"; shift
  mvn 2>/dev/null help:evaluate -q -DforceStdout -Dexpression="$prop" "$@" \
  && echo
}
# Shows empty line
mvnprop() {
  local prop="$1"; shift
  MAVEN_OPTS="$MAVEN_OPTS -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn" \
    mvn 2>/dev/null -B com.github.ekryd.echo-maven-plugin:echo-maven-plugin:echo -Decho.message='${'"$prop"'}' "$@" \
      | grep -A1 echo-maven-plugin | grep -v -- '--' | grep -v echo-maven-plugin | cut -d' ' -f2-
}
mvndep() {
  local dep="$1"; shift
  MAVEN_OPTS="$MAVEN_OPTS -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn" \
    mvn 2>&1 -B dependency:tree ${dep:+-Dincludes="$dep"} "$@" \
    | sed -rn '/\[INFO\] --- /,/Reactor Summary for / s/\[INFO\] //p' | head -n-1
}

gradle.dep() (
  local dep="${1:?Please specify dependency to be checked}"; shift
  set -x
  ./gradlew 2>&1 :dependencyInsight --configuration compileClasspath \
    ${dep:+--dependency="$dep"} "$@"
)

# git

git.grep() {
  local search_string="$1"; shift
  local file_path="$1"
  local files=()

  test "$file_path" &&
    files+=("--" "$file_path")

  #git grep -B 1 "$search_string" $(git branch -l | grep -v '^\*' | awk '{print $1}') "${files[@]}"
  git log --all --oneline  --graph -G"$search_string" "${files[@]}"
  echo ' Then...
# git branch -a --contains <commit hash>
# git show <commit hash>
'
}

# jq

jqlog() {
  grep --line-buffered -E '^{' | while read -r LINE; do echo -E "$LINE" \
    | jq -r '.level + " " + .loggerName + "\t" + .message'; done
}
